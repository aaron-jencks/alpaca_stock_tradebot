@startuml "Domain Model Diagram"

package "DataBase" {

    object Stock {
        + id: string unique
        + acronym: string
        + ask_price: float
        + bid_price: float
        + ask_size: int
        + bid_size: int
    }

    object ManagedStock {
        + id: string unique
        + stock_acronym: string
        + shares: int
        + last_price: float
    }

    object StockUpdate {
        + id: string unique
        + stock_acronym: string
        + ask_price: float
        + bid_price: float
        + ask_size: int
        + bid_size: int
        + date: string
    }

    object StockTransaction {
        + id: string unique
        + managed_stock_id: string
        + acronym: string
        + buy/sell: bool
        + price: float
        + shares: int
    }

    object StockLimit {
        + managed_stock_id: string
        + type: string
        + upper: float
        + lower: float
    }

    object BalanceLedger {
        + balance: float
        + date: string
    }

    Stock "1" .. "1..*" ManagedStock : < Describes
    Stock "1" .. "0..*" StockUpdate : < Describes,\nan instance\nin time of
    ManagedStock "1" .. "0..*" StockTransaction : < Describes\na change to
    ManagedStock "1..*" .. "1" StockLimit : < Describes when to buy/sell
    StockTransaction "1..*" .. "1" BalanceLedger : < Describes changes in

}

class Vault {
    - db: database
    + getStockNames(): string[]
    + updatePrices(acronym: string, ask: float, bid: float)
    + getInfo(id: string): ManagedStock
    + addStock(s: ManagedStock): string
    + addMonitor(s: Stock): string
    + removeStock(id: string)
    + removeMonitor(id: string): bool
}

Vault "1" .. "1" DataBase : Manages

class TradeController {
    + stocks : StockDescriptor[]
    + buy(s: StockDescriptor)
    + sell(s: StockDescriptor)
}

ManagedStock "1..*" .. "1" TradeController : < Manages
StockTransaction "0..*" .. "1" TradeController : < Generates
BalanceLedger "0..*" .. "1" TradeController : < Updates

class PyrhAdapter {
    - rbn: Robinhood
    - login()
    + place_buy()
    + place_sell()
    + get_quote()
}

TradeController "1" .. "1" PyrhAdapter : > Triggers

class DataMonitor {
    + limits : dict<string, StockLimit>
    + stocks : Stock[]
    + append(stock : Stock)
    + update_prices()
}

TradeController "1" .. "1" DataMonitor : < Triggers
Stock "0..*" .. "1" DataMonitor : < Updates
StockLimit "0..*" .. "1" DataMonitor : < Uses
PyrhAdapter "1" .. "1" DataMonitor : < Interfaces with

class Timer {
    + interval : int
}

class MarketTimer {
    Automatically pauses\noutside of market hours
}

MarketTimer --|> Timer

MarketTimer "1" .. "1" DataMonitor : > Triggers

@enduml
